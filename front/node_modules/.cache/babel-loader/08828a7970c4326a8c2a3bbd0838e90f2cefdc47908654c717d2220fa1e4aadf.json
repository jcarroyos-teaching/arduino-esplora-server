{"ast":null,"code":"var _jsxFileName = \"/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorCanvas = () => {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    lightValue: 0,\n    slideValue: 0,\n    temperatureValue: 0\n  });\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const currentRadiiRef = useRef({\n    light: 0,\n    slide: 0,\n    temperature: 0\n  });\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data');\n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10)\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n    fetchData();\n    const intervalId = setInterval(fetchData, 500); // Fetch new data every 0.5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n  useEffect(() => {\n    const animateCircles = () => {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      const {\n        lightValue,\n        slideValue,\n        temperatureValue\n      } = sensorData;\n      const {\n        light,\n        slide,\n        temperature\n      } = currentRadiiRef.current;\n\n      // Calculate target radii based on sensor values\n      const targetRadii = {\n        light: lightValue / 12,\n        slide: slideValue / 12,\n        temperature: temperatureValue * 2.8\n      };\n\n      // Smoothly update current radii towards target radii\n      currentRadiiRef.current = {\n        light: light + (targetRadii.light - light) * 0.1,\n        slide: slide + (targetRadii.slide - slide) * 0.1,\n        temperature: temperature + (targetRadii.temperature - temperature) * 0.1\n      };\n\n      // Clear previous drawing\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Define circles properties\n      const circles = [{\n        x: 100,\n        y: 150,\n        radius: light,\n        color: '#F07167'\n      }, {\n        x: 300,\n        y: 150,\n        radius: slide,\n        color: '#00AFB9'\n      }, {\n        x: 500,\n        y: 150,\n        radius: temperature,\n        color: '#FED9B7'\n      }];\n\n      // Draw each circle\n      circles.forEach(({\n        x,\n        y,\n        radius,\n        color\n      }) => {\n        context.beginPath();\n        context.arc(x, y, radius, 0, 2 * Math.PI);\n        context.fillStyle = color;\n        context.fill();\n      });\n\n      // Request next frame in the animation\n      animationRef.current = requestAnimationFrame(animateCircles);\n    };\n\n    // Start the animation\n    animationRef.current = requestAnimationFrame(animateCircles);\n    return () => {\n      // Cancel the animation on component unmount\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [sensorData]); // We depend on `sensorData` to decide when to rerun the effect\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 600,\n    height: 300\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorCanvas, \"3fIYxYPg5OlFW5blQ+8pjCaElM8=\");\n_c = SensorCanvas;\nexport default SensorCanvas;\nvar _c;\n$RefreshReg$(_c, \"SensorCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","SensorCanvas","_s","sensorData","setSensorData","lightValue","slideValue","temperatureValue","canvasRef","animationRef","currentRadiiRef","light","slide","temperature","fetchData","response","fetch","data","json","parseInt","error","console","intervalId","setInterval","clearInterval","animateCircles","canvas","current","context","getContext","targetRadii","clearRect","width","height","circles","x","y","radius","color","forEach","beginPath","arc","Math","PI","fillStyle","fill","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst SensorCanvas = () => {\n  const [sensorData, setSensorData] = useState({ lightValue: 0, slideValue: 0, temperatureValue: 0 });\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const currentRadiiRef = useRef({ light: 0, slide: 0, temperature: 0 });\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data');\n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10),\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n\n    fetchData();\n    const intervalId = setInterval(fetchData, 500); // Fetch new data every 0.5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n\n  useEffect(() => {\n    const animateCircles = () => {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      const { lightValue, slideValue, temperatureValue } = sensorData;\n      const { light, slide, temperature } = currentRadiiRef.current;\n\n      // Calculate target radii based on sensor values\n      const targetRadii = {\n        light: lightValue / 12,\n        slide: slideValue / 12,\n        temperature: temperatureValue * 2.8,\n      };\n\n      // Smoothly update current radii towards target radii\n      currentRadiiRef.current = {\n        light: light + (targetRadii.light - light) * 0.1,\n        slide: slide + (targetRadii.slide - slide) * 0.1,\n        temperature: temperature + (targetRadii.temperature - temperature) * 0.1,\n      };\n\n      // Clear previous drawing\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Define circles properties\n      const circles = [\n        { x: 100, y: 150, radius: light, color: '#F07167' },\n        { x: 300, y: 150, radius: slide, color: '#00AFB9' },\n        { x: 500, y: 150, radius: temperature, color: '#FED9B7' },\n      ];\n\n      // Draw each circle\n      circles.forEach(({ x, y, radius, color }) => {\n        context.beginPath();\n        context.arc(x, y, radius, 0, 2 * Math.PI);\n        context.fillStyle = color;\n        context.fill();\n      });\n\n      // Request next frame in the animation\n      animationRef.current = requestAnimationFrame(animateCircles);\n    };\n\n    // Start the animation\n    animationRef.current = requestAnimationFrame(animateCircles);\n\n    return () => {\n      // Cancel the animation on component unmount\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [sensorData]); // We depend on `sensorData` to decide when to rerun the effect\n\n  return (\n    <canvas ref={canvasRef} width={600} height={300} />\n  );\n};\n\nexport default SensorCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}