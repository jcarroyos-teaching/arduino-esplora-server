{"ast":null,"code":"var _jsxFileName = \"/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js\",\n  _s = $RefreshSig$();\n// src/SensorCanvas.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorCanvas = () => {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    lightValue: 0,\n    slideValue: 0,\n    temperatureValue: 0\n  });\n  const canvasRef = useRef(null);\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data');\n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10)\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n    fetchData();\n    const intervalId = setInterval(fetchData, 250); // Fetch new data every 5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n\n  // Draw circles on the canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const {\n      lightValue,\n      slideValue,\n      temperatureValue\n    } = sensorData;\n\n    // Clear previous drawing\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Define circles properties based on sensor values\n    const circles = [{\n      x: 100,\n      y: 150,\n      radius: lightValue / 10,\n      color: 'red'\n    }, {\n      x: 300,\n      y: 150,\n      radius: slideValue / 10,\n      color: 'green'\n    }, {\n      x: 500,\n      y: 150,\n      radius: temperatureValue * 3,\n      color: 'blue'\n    } // Multiplied to make the temperature circle visible\n    ];\n\n    // Draw each circle\n    circles.forEach(({\n      x,\n      y,\n      radius,\n      color\n    }) => {\n      context.beginPath();\n      context.arc(x, y, radius, 0, 2 * Math.PI);\n      context.fillStyle = color;\n      context.fill();\n    });\n  }, [sensorData]); // Redraw whenever sensorData changes\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 600,\n    height: 300\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorCanvas, \"P4D9Y+XVCN7uwWiMT2Trxv0hKiE=\");\n_c = SensorCanvas;\nexport default SensorCanvas;\nvar _c;\n$RefreshReg$(_c, \"SensorCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","SensorCanvas","_s","sensorData","setSensorData","lightValue","slideValue","temperatureValue","canvasRef","fetchData","response","fetch","data","json","parseInt","error","console","intervalId","setInterval","clearInterval","canvas","current","context","getContext","clearRect","width","height","circles","x","y","radius","color","forEach","beginPath","arc","Math","PI","fillStyle","fill","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js"],"sourcesContent":["// src/SensorCanvas.js\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst SensorCanvas = () => {\n  const [sensorData, setSensorData] = useState({ lightValue: 0, slideValue: 0, temperatureValue: 0 });\n  const canvasRef = useRef(null);\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data'); \n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10),\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n\n    fetchData();\n    const intervalId = setInterval(fetchData, 250); // Fetch new data every 5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n\n  // Draw circles on the canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const { lightValue, slideValue, temperatureValue } = sensorData;\n\n    // Clear previous drawing\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Define circles properties based on sensor values\n    const circles = [\n      { x: 100, y: 150, radius: lightValue / 10, color: 'red' },\n      { x: 300, y: 150, radius: slideValue / 10, color: 'green' },\n      { x: 500, y: 150, radius: temperatureValue * 3, color: 'blue' }, // Multiplied to make the temperature circle visible\n    ];\n\n    // Draw each circle\n    circles.forEach(({ x, y, radius, color }) => {\n      context.beginPath();\n      context.arc(x, y, radius, 0, 2 * Math.PI);\n      context.fillStyle = color;\n      context.fill();\n    });\n  }, [sensorData]); // Redraw whenever sensorData changes\n\n  return (\n    <canvas ref={canvasRef} width={600} height={300} />\n  );\n};\n\nexport default SensorCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}