{"ast":null,"code":"var _jsxFileName = \"/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js\",\n  _s = $RefreshSig$();\n// src/SensorCanvas.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorCanvas = () => {\n  _s();\n  const [sensorData, setSensorData] = useState({\n    lightValue: 0,\n    slideValue: 0,\n    temperatureValue: 0\n  });\n  const canvasRef = useRef(null);\n\n  // Use react-spring to animate sensor data\n  const props = useSpring({\n    lightValue: sensorData.lightValue,\n    slideValue: sensorData.slideValue,\n    temperatureValue: sensorData.temperatureValue,\n    config: {\n      duration: 500\n    } // Configure the duration of the animation\n  });\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data');\n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10)\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n    fetchData();\n    const intervalId = setInterval(fetchData, 250); // Fetch new data every 5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n\n  // Use the animated values in your render method\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      width: props.lightValue,\n      height: props.slideValue\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorCanvas, \"OR446a0kKN2pW7W/+Z6NiizRvbM=\", false, function () {\n  return [useSpring];\n});\n_c = SensorCanvas;\nexport default SensorCanvas;\nvar _c;\n$RefreshReg$(_c, \"SensorCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useSpring","animated","jsxDEV","_jsxDEV","SensorCanvas","_s","sensorData","setSensorData","lightValue","slideValue","temperatureValue","canvasRef","props","config","duration","fetchData","response","fetch","data","json","parseInt","error","console","intervalId","setInterval","clearInterval","div","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/imac/Documents/repos/teaching/arduino-esplora-server/front/src/SensorCanvas.js"],"sourcesContent":["// src/SensorCanvas.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nconst SensorCanvas = () => {\n  const [sensorData, setSensorData] = useState({ lightValue: 0, slideValue: 0, temperatureValue: 0 });\n  const canvasRef = useRef(null);\n\n  // Use react-spring to animate sensor data\n  const props = useSpring({ \n    lightValue: sensorData.lightValue, \n    slideValue: sensorData.slideValue, \n    temperatureValue: sensorData.temperatureValue,\n    config: { duration: 500 } // Configure the duration of the animation\n  });\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/data'); \n        const data = await response.json();\n        setSensorData({\n          lightValue: parseInt(data.lightValue, 10),\n          slideValue: parseInt(data.slideValue, 10),\n          temperatureValue: parseInt(data.temperatureValue, 10),\n        });\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n      }\n    };\n\n    fetchData();\n    const intervalId = setInterval(fetchData, 250); // Fetch new data every 5 seconds\n\n    return () => clearInterval(intervalId); // Clean up interval on component unmount\n  }, []);\n\n  // Use the animated values in your render method\n  return (\n    <animated.div style={{ width: props.lightValue, height: props.slideValue }}>\n      {/* Your canvas code here */}\n    </animated.div>\n  );\n};\n\nexport default SensorCanvas;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC;IAAES,UAAU,EAAE,CAAC;IAAEC,UAAU,EAAE,CAAC;IAAEC,gBAAgB,EAAE;EAAE,CAAC,CAAC;EACnG,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMc,KAAK,GAAGZ,SAAS,CAAC;IACtBQ,UAAU,EAAEF,UAAU,CAACE,UAAU;IACjCC,UAAU,EAAEH,UAAU,CAACG,UAAU;IACjCC,gBAAgB,EAAEJ,UAAU,CAACI,gBAAgB;IAC7CG,MAAM,EAAE;MAAEC,QAAQ,EAAE;IAAI,CAAC,CAAC;EAC5B,CAAC,CAAC;;EAEF;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCZ,aAAa,CAAC;UACZC,UAAU,EAAEY,QAAQ,CAACF,IAAI,CAACV,UAAU,EAAE,EAAE,CAAC;UACzCC,UAAU,EAAEW,QAAQ,CAACF,IAAI,CAACT,UAAU,EAAE,EAAE,CAAC;UACzCC,gBAAgB,EAAEU,QAAQ,CAACF,IAAI,CAACR,gBAAgB,EAAE,EAAE;QACtD,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;IACX,MAAMQ,UAAU,GAAGC,WAAW,CAACT,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;;IAEhD,OAAO,MAAMU,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEpB,OAAA,CAACF,QAAQ,CAACyB,GAAG;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAEhB,KAAK,CAACJ,UAAU;MAAEqB,MAAM,EAAEjB,KAAK,CAACH;IAAW;EAAE;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7D,CAAC;AAEnB,CAAC;AAAC5B,EAAA,CAxCID,YAAY;EAAA,QAKFJ,SAAS;AAAA;AAAAkC,EAAA,GALnB9B,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}